// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// TokensPair defines model for TokensPair.
type TokensPair struct {
	AccessToken  string `json:"access_token"`
	RefreshToken string `json:"refresh_token"`
}

// UserGuid defines model for UserGuid.
type UserGuid struct {
	UserGuid *string `json:"user_guid,omitempty"`
}

// UserAgent defines model for UserAgent.
type UserAgent = string

// UserGuidParam defines model for UserGuidParam.
type UserGuidParam = string

// N400 defines model for 400.
type N400 struct {
	Message *string `json:"message,omitempty"`
}

// N500 defines model for 500.
type N500 struct {
	Message *string `json:"message,omitempty"`
}

// PostAuthorizeParams defines parameters for PostAuthorize.
type PostAuthorizeParams struct {
	Guid      UserGuidParam `form:"guid" json:"guid"`
	UserAgent UserAgent     `json:"User-Agent"`
}

// PostRefreshParams defines parameters for PostRefresh.
type PostRefreshParams struct {
	UserAgent UserAgent `json:"User-Agent"`
}

// GetUserGuidParams defines parameters for GetUserGuid.
type GetUserGuidParams struct {
	Authorization string `json:"Authorization"`
}

// PostUserLogoutParams defines parameters for PostUserLogout.
type PostUserLogoutParams struct {
	Authorization string `json:"Authorization"`
}

// PostRefreshJSONRequestBody defines body for PostRefresh for application/json ContentType.
type PostRefreshJSONRequestBody = TokensPair

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostAuthorize request
	PostAuthorize(ctx context.Context, params *PostAuthorizeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRefreshWithBody request with any body
	PostRefreshWithBody(ctx context.Context, params *PostRefreshParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRefresh(ctx context.Context, params *PostRefreshParams, body PostRefreshJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserGuid request
	GetUserGuid(ctx context.Context, params *GetUserGuidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserLogout request
	PostUserLogout(ctx context.Context, params *PostUserLogoutParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostAuthorize(ctx context.Context, params *PostAuthorizeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthorizeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRefreshWithBody(ctx context.Context, params *PostRefreshParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRefreshRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRefresh(ctx context.Context, params *PostRefreshParams, body PostRefreshJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRefreshRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserGuid(ctx context.Context, params *GetUserGuidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserGuidRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserLogout(ctx context.Context, params *PostUserLogoutParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserLogoutRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostAuthorizeRequest generates requests for PostAuthorize
func NewPostAuthorizeRequest(server string, params *PostAuthorizeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "guid", runtime.ParamLocationQuery, params.Guid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "User-Agent", runtime.ParamLocationHeader, params.UserAgent)
		if err != nil {
			return nil, err
		}

		req.Header.Set("User-Agent", headerParam0)

	}

	return req, nil
}

// NewPostRefreshRequest calls the generic PostRefresh builder with application/json body
func NewPostRefreshRequest(server string, params *PostRefreshParams, body PostRefreshJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRefreshRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostRefreshRequestWithBody generates requests for PostRefresh with any type of body
func NewPostRefreshRequestWithBody(server string, params *PostRefreshParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/refresh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "User-Agent", runtime.ParamLocationHeader, params.UserAgent)
		if err != nil {
			return nil, err
		}

		req.Header.Set("User-Agent", headerParam0)

	}

	return req, nil
}

// NewGetUserGuidRequest generates requests for GetUserGuid
func NewGetUserGuidRequest(server string, params *GetUserGuidParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/guid")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPostUserLogoutRequest generates requests for PostUserLogout
func NewPostUserLogoutRequest(server string, params *PostUserLogoutParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostAuthorizeWithResponse request
	PostAuthorizeWithResponse(ctx context.Context, params *PostAuthorizeParams, reqEditors ...RequestEditorFn) (*PostAuthorizeResponse, error)

	// PostRefreshWithBodyWithResponse request with any body
	PostRefreshWithBodyWithResponse(ctx context.Context, params *PostRefreshParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRefreshResponse, error)

	PostRefreshWithResponse(ctx context.Context, params *PostRefreshParams, body PostRefreshJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRefreshResponse, error)

	// GetUserGuidWithResponse request
	GetUserGuidWithResponse(ctx context.Context, params *GetUserGuidParams, reqEditors ...RequestEditorFn) (*GetUserGuidResponse, error)

	// PostUserLogoutWithResponse request
	PostUserLogoutWithResponse(ctx context.Context, params *PostUserLogoutParams, reqEditors ...RequestEditorFn) (*PostUserLogoutResponse, error)
}

type PostAuthorizeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokensPair
	JSON400      *N400
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PostAuthorizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthorizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRefreshResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokensPair
	JSON400      *N400
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PostRefreshResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRefreshResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserGuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserGuid
	JSON400      *N400
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetUserGuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserGuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserLogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PostUserLogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserLogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostAuthorizeWithResponse request returning *PostAuthorizeResponse
func (c *ClientWithResponses) PostAuthorizeWithResponse(ctx context.Context, params *PostAuthorizeParams, reqEditors ...RequestEditorFn) (*PostAuthorizeResponse, error) {
	rsp, err := c.PostAuthorize(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthorizeResponse(rsp)
}

// PostRefreshWithBodyWithResponse request with arbitrary body returning *PostRefreshResponse
func (c *ClientWithResponses) PostRefreshWithBodyWithResponse(ctx context.Context, params *PostRefreshParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRefreshResponse, error) {
	rsp, err := c.PostRefreshWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRefreshResponse(rsp)
}

func (c *ClientWithResponses) PostRefreshWithResponse(ctx context.Context, params *PostRefreshParams, body PostRefreshJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRefreshResponse, error) {
	rsp, err := c.PostRefresh(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRefreshResponse(rsp)
}

// GetUserGuidWithResponse request returning *GetUserGuidResponse
func (c *ClientWithResponses) GetUserGuidWithResponse(ctx context.Context, params *GetUserGuidParams, reqEditors ...RequestEditorFn) (*GetUserGuidResponse, error) {
	rsp, err := c.GetUserGuid(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserGuidResponse(rsp)
}

// PostUserLogoutWithResponse request returning *PostUserLogoutResponse
func (c *ClientWithResponses) PostUserLogoutWithResponse(ctx context.Context, params *PostUserLogoutParams, reqEditors ...RequestEditorFn) (*PostUserLogoutResponse, error) {
	rsp, err := c.PostUserLogout(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserLogoutResponse(rsp)
}

// ParsePostAuthorizeResponse parses an HTTP response from a PostAuthorizeWithResponse call
func ParsePostAuthorizeResponse(rsp *http.Response) (*PostAuthorizeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthorizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokensPair
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostRefreshResponse parses an HTTP response from a PostRefreshWithResponse call
func ParsePostRefreshResponse(rsp *http.Response) (*PostRefreshResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRefreshResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokensPair
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserGuidResponse parses an HTTP response from a GetUserGuidWithResponse call
func ParseGetUserGuidResponse(rsp *http.Response) (*GetUserGuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserGuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserGuid
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostUserLogoutResponse parses an HTTP response from a PostUserLogoutWithResponse call
func ParsePostUserLogoutResponse(rsp *http.Response) (*PostUserLogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserLogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authorize user
	// (POST /authorize)
	PostAuthorize(c *fiber.Ctx, params PostAuthorizeParams) error
	// refresh token
	// (POST /refresh)
	PostRefresh(c *fiber.Ctx, params PostRefreshParams) error
	// get user guid by access token
	// (GET /user/guid)
	GetUserGuid(c *fiber.Ctx, params GetUserGuidParams) error
	// logout by access token
	// (POST /user/logout)
	PostUserLogout(c *fiber.Ctx, params PostUserLogoutParams) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// PostAuthorize operation middleware
func (siw *ServerInterfaceWrapper) PostAuthorize(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthorizeParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "guid" -------------

	if paramValue := c.Query("guid"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument guid is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "guid", query, &params.Guid)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter guid: %w", err).Error())
	}

	headers := c.GetReqHeaders()

	// ------------- Required header parameter "User-Agent" -------------
	if value, found := headers[http.CanonicalHeaderKey("User-Agent")]; found {
		var UserAgent UserAgent

		err = runtime.BindStyledParameterWithOptions("simple", "User-Agent", value, &UserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter User-Agent: %w", err).Error())
		}

		params.UserAgent = UserAgent

	} else {
		err = fmt.Errorf("Header parameter User-Agent is required, but not found: %w", err)
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}

	return siw.Handler.PostAuthorize(c, params)
}

// PostRefresh operation middleware
func (siw *ServerInterfaceWrapper) PostRefresh(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostRefreshParams

	headers := c.GetReqHeaders()

	// ------------- Required header parameter "User-Agent" -------------
	if value, found := headers[http.CanonicalHeaderKey("User-Agent")]; found {
		var UserAgent UserAgent

		err = runtime.BindStyledParameterWithOptions("simple", "User-Agent", value, &UserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter User-Agent: %w", err).Error())
		}

		params.UserAgent = UserAgent

	} else {
		err = fmt.Errorf("Header parameter User-Agent is required, but not found: %w", err)
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}

	return siw.Handler.PostRefresh(c, params)
}

// GetUserGuid operation middleware
func (siw *ServerInterfaceWrapper) GetUserGuid(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserGuidParams

	headers := c.GetReqHeaders()

	// ------------- Required header parameter "Authorization" -------------
	if value, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", value, &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter Authorization: %w", err).Error())
		}

		params.Authorization = Authorization

	} else {
		err = fmt.Errorf("Header parameter Authorization is required, but not found: %w", err)
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}

	return siw.Handler.GetUserGuid(c, params)
}

// PostUserLogout operation middleware
func (siw *ServerInterfaceWrapper) PostUserLogout(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostUserLogoutParams

	headers := c.GetReqHeaders()

	// ------------- Required header parameter "Authorization" -------------
	if value, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string

		err = runtime.BindStyledParameterWithOptions("simple", "Authorization", value, &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter Authorization: %w", err).Error())
		}

		params.Authorization = Authorization

	} else {
		err = fmt.Errorf("Header parameter Authorization is required, but not found: %w", err)
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}

	return siw.Handler.PostUserLogout(c, params)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Post(options.BaseURL+"/authorize", wrapper.PostAuthorize)

	router.Post(options.BaseURL+"/refresh", wrapper.PostRefresh)

	router.Get(options.BaseURL+"/user/guid", wrapper.GetUserGuid)

	router.Post(options.BaseURL+"/user/logout", wrapper.PostUserLogout)

}

type N400JSONResponse struct {
	Message *string `json:"message,omitempty"`
}

type N500JSONResponse struct {
	Message *string `json:"message,omitempty"`
}

type PostAuthorizeRequestObject struct {
	Params PostAuthorizeParams
}

type PostAuthorizeResponseObject interface {
	VisitPostAuthorizeResponse(ctx *fiber.Ctx) error
}

type PostAuthorize200JSONResponse TokensPair

func (response PostAuthorize200JSONResponse) VisitPostAuthorizeResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostAuthorize400JSONResponse struct{ N400JSONResponse }

func (response PostAuthorize400JSONResponse) VisitPostAuthorizeResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostAuthorize500JSONResponse struct{ N500JSONResponse }

func (response PostAuthorize500JSONResponse) VisitPostAuthorizeResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostRefreshRequestObject struct {
	Params PostRefreshParams
	Body   *PostRefreshJSONRequestBody
}

type PostRefreshResponseObject interface {
	VisitPostRefreshResponse(ctx *fiber.Ctx) error
}

type PostRefresh200JSONResponse TokensPair

func (response PostRefresh200JSONResponse) VisitPostRefreshResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostRefresh400JSONResponse struct{ N400JSONResponse }

func (response PostRefresh400JSONResponse) VisitPostRefreshResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostRefresh500JSONResponse struct{ N500JSONResponse }

func (response PostRefresh500JSONResponse) VisitPostRefreshResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetUserGuidRequestObject struct {
	Params GetUserGuidParams
}

type GetUserGuidResponseObject interface {
	VisitGetUserGuidResponse(ctx *fiber.Ctx) error
}

type GetUserGuid200JSONResponse UserGuid

func (response GetUserGuid200JSONResponse) VisitGetUserGuidResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetUserGuid400JSONResponse struct{ N400JSONResponse }

func (response GetUserGuid400JSONResponse) VisitGetUserGuidResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetUserGuid500JSONResponse struct{ N500JSONResponse }

func (response GetUserGuid500JSONResponse) VisitGetUserGuidResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostUserLogoutRequestObject struct {
	Params PostUserLogoutParams
}

type PostUserLogoutResponseObject interface {
	VisitPostUserLogoutResponse(ctx *fiber.Ctx) error
}

type PostUserLogout200Response struct {
}

func (response PostUserLogout200Response) VisitPostUserLogoutResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type PostUserLogout400JSONResponse struct{ N400JSONResponse }

func (response PostUserLogout400JSONResponse) VisitPostUserLogoutResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostUserLogout500JSONResponse struct{ N500JSONResponse }

func (response PostUserLogout500JSONResponse) VisitPostUserLogoutResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Authorize user
	// (POST /authorize)
	PostAuthorize(ctx context.Context, request PostAuthorizeRequestObject) (PostAuthorizeResponseObject, error)
	// refresh token
	// (POST /refresh)
	PostRefresh(ctx context.Context, request PostRefreshRequestObject) (PostRefreshResponseObject, error)
	// get user guid by access token
	// (GET /user/guid)
	GetUserGuid(ctx context.Context, request GetUserGuidRequestObject) (GetUserGuidResponseObject, error)
	// logout by access token
	// (POST /user/logout)
	PostUserLogout(ctx context.Context, request PostUserLogoutRequestObject) (PostUserLogoutResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostAuthorize operation middleware
func (sh *strictHandler) PostAuthorize(ctx *fiber.Ctx, params PostAuthorizeParams) error {
	var request PostAuthorizeRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthorize(ctx.UserContext(), request.(PostAuthorizeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthorize")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostAuthorizeResponseObject); ok {
		if err := validResponse.VisitPostAuthorizeResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostRefresh operation middleware
func (sh *strictHandler) PostRefresh(ctx *fiber.Ctx, params PostRefreshParams) error {
	var request PostRefreshRequestObject

	request.Params = params

	var body PostRefreshJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostRefresh(ctx.UserContext(), request.(PostRefreshRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRefresh")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostRefreshResponseObject); ok {
		if err := validResponse.VisitPostRefreshResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUserGuid operation middleware
func (sh *strictHandler) GetUserGuid(ctx *fiber.Ctx, params GetUserGuidParams) error {
	var request GetUserGuidRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserGuid(ctx.UserContext(), request.(GetUserGuidRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserGuid")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetUserGuidResponseObject); ok {
		if err := validResponse.VisitGetUserGuidResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostUserLogout operation middleware
func (sh *strictHandler) PostUserLogout(ctx *fiber.Ctx, params PostUserLogoutParams) error {
	var request PostUserLogoutRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostUserLogout(ctx.UserContext(), request.(PostUserLogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUserLogout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostUserLogoutResponseObject); ok {
		if err := validResponse.VisitPostUserLogoutResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xW2ZLaOBT9FUozjyy2WRJ4M0szIpZpwG4ap1IpYwsjg5dIchuT4t+nZNwQAj3JzFSW",
	"h35i0dG9V/eec6TPwImCOApxyBnofAaxTe0Ac0zzXybDVPVwyMUPEoIOWGPbxRSUQWgHGHRyROUIKQOK",
	"PyWEYhd0OE1wGTBnjQNb7MU7O4i3YsN9xHhgh9Mk5CTAtTfVRqMqgzLgWSyWGack9MDhUM5DDxPi3ouS",
	"TgV8SjDNzvm9hLjfmXnVWjZWNpYrzUa7VWnU228ry1W9VZGU+lulKbXfrFzlRiEHEZ3FUchw3pOGJIkP",
	"Jwp50Rg7jrfEsTmJwprPolD8dy4gplGMKSfH3QFmzPaw+Hp94uKfaOljhx9Tu5g5lMQiNuiAru2WxFEx",
	"4+BQBs1fWAoMOaahvS3NMH3CtDSgNKL51mO+PIURbXDI7m1Cr9PbjoMZ+8gF5HJQOButl0OHjMkImntz",
	"hwhkMJw2nR5swU38+NAbtas4G8VOHQkQt+bTJ+svfeUOH/ZuT4B1eUFgCwYLZeFPg8Xc3GmGKY2NBdf7",
	"qDnuycTykaIZaob2XqYbalNXrE2eKLiTLZEo2D0tlDtmD9t7tx81UN9LIUmJ9bhOoR/t9L2Z6YYn6/5g",
	"p/VGySJYkLE/qOsGlFF/kCJjwGCwXbs92EKGIyN/0hwbcIdmKbHDaQz9iMy2rjkzJ0TrjTTrcUPGBEq6",
	"MVHGfdhYZJKChlDWjMHO8lU+nj/4FpFS1B/I+nwqTlbX+5CsJtW6pbX6DX0UsjcPqlqfzQfmtDsxKrqe",
	"uG5dq2gT7KfqZr98pPfK23ftO1N6erQ2qJ5hfZkYeurMu+42sELU7Pms/fEdU7oV9VoKQggritn6haGZ",
	"9lzeinMhX830mZTqmbTTe+pO96MM9aMdmjUUtFdl1EdN2GMp2qspHMjGLOvy+xlraL6Z6T5sor2Xohlk",
	"cMO3eAZb0J/Ien/RQP7a14xFuvBNjoy7APWkpjXXA81QU2SYsjW0fMt3JERG7ZuWcraJ95f8+/poH64U",
	"cPajayonDNOPXrH0vw3npvhIuIpypRKex1ZjAsrgCVN2lKNclaqSqDKKcWjHBHRAvSpV66AMYpuv8zJr",
	"dsLXESX7XPNxxHLLuJS1+gwpiUOV7FAYDk9oWMobw0CegeYOA93Cz0+b8mznC+T9Z/AnxSvQAX/UztdM",
	"7QypXXr8ofxdG47XzeHDV8as/Es3vJWp8K7aF8Z1w/tEESWW5ARaJdttVjp11hUzKK6IWwlOFdcE6Ozh",
	"/4wVoNxakyCwaXY1J8Ei2xMdz7kIPghwraD0y8MuAMVovxx2iNPSM7luTXxahP4v8/5yfPlV1o3c7AdN",
	"7vDLOJKvXpKkaPdP48jFeG9TRHytPTuXh29wxMP8aAUCVVpmpaNvnoJecmOI+ckmr7hx8wH5TOQ8xne+",
	"5F4fCL/nA+GHWvKJV7+n2L6lk5fEt428KOEve/Rx/ZvCE6YsOqQdw71q71V7Rx5fsulCIgX1fo4+XuTx",
	"18I4HP4OAAD//0DWp++UEAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
