// Code generated by generator, DO NOT EDIT.
package token

import (
	"context"
	"database/sql"

	sq "github.com/Masterminds/squirrel"
)

type querier interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

type wildcard int

const (
	QuestionWildcard wildcard = iota + 1
	DollarWildcard
)

type CommandRepository struct {
	runner      querier
	placeholder wildcard
}

type QueryRepository struct {
	runner      querier
	placeholder wildcard
}

func NewCommand(db querier, wildcards ...wildcard) *CommandRepository {
	w := QuestionWildcard
	if len(wildcards) > 0 {
		w = wildcards[0]
	}

	return &CommandRepository{
		runner:      db,
		placeholder: w,
	}
}

func NewQuery(db querier, wildcards ...wildcard) *QueryRepository {
	w := QuestionWildcard
	if len(wildcards) > 0 {
		w = wildcards[0]
	}

	return &QueryRepository{
		runner:      db,
		placeholder: w,
	}
}

// TokenFiler represents the Token filter.
type Filter struct {
	id                      *int64
	notid                   *int64
	gtid                    *int64
	ltid                    *int64
	gteqid                  *int64
	lteqid                  *int64
	ids                     []int64
	idorderByAsc            *string
	idorderByDesc           *string
	userguid                *string
	notuserguid             *string
	gtuserguid              *string
	ltuserguid              *string
	gtequserguid            *string
	ltequserguid            *string
	userguids               []string
	userguidorderByAsc      *string
	userguidorderByDesc     *string
	refreshtoken            *string
	notrefreshtoken         *string
	gtrefreshtoken          *string
	ltrefreshtoken          *string
	gteqrefreshtoken        *string
	lteqrefreshtoken        *string
	refreshtokens           []string
	refreshtokenorderByAsc  *string
	refreshtokenorderByDesc *string
	active                  *bool
	notactive               *bool
	gtactive                *bool
	ltactive                *bool
	gteqactive              *bool
	lteqactive              *bool
	actives                 []bool
	activeorderByAsc        *string
	activeorderByDesc       *string
	useragent               *string
	notuseragent            *string
	gtuseragent             *string
	ltuseragent             *string
	gtequseragent           *string
	ltequseragent           *string
	useragents              []string
	useragentorderByAsc     *string
	useragentorderByDesc    *string
	ip                      *string
	notip                   *string
	gtip                    *string
	ltip                    *string
	gteqip                  *string
	lteqip                  *string
	ips                     []string
	iporderByAsc            *string
	iporderByDesc           *string
	limit                   *int
	offset                  *int
}

type FilterOpt func(f *Filter)

func NewFilter(opts ...FilterOpt) Filter {
	f := Filter{}
	for _, opt := range opts {
		opt(&f)
	}
	return f
}

func WithLimit(limit int) FilterOpt {
	c := limit
	return func(f *Filter) {
		f.limit = &c
	}
}
func WithOffset(offset int) FilterOpt {
	c := offset
	return func(f *Filter) {
		f.offset = &c
	}
}
func WithID(id int64) FilterOpt {
	c := id
	return func(f *Filter) {
		f.id = &c
	}
}
func WithIDNot(id int64) FilterOpt {
	c := id
	return func(f *Filter) {
		f.notid = &c
	}
}
func WithIDMoreThen(id int64) FilterOpt {
	c := id
	return func(f *Filter) {
		f.gtid = &c
	}
}
func WithIDLowerThen(id int64) FilterOpt {
	c := id
	return func(f *Filter) {
		f.ltid = &c
	}
}
func WithIDMoreOrEqualThen(id int64) FilterOpt {
	c := id
	return func(f *Filter) {
		f.gteqid = &c
	}
}
func WithIDLowerOrEqualThen(id int64) FilterOpt {
	c := id
	return func(f *Filter) {
		f.lteqid = &c
	}
}
func WithIDs(ids ...int64) FilterOpt {
	return func(f *Filter) {
		f.ids = append(f.ids, ids...)
	}
}

func WithOrderByIDAsc() FilterOpt {
	return func(f *Filter) {
		var column string = "id ASC"
		f.idorderByAsc = &column
	}
}
func WithOrderByIDDesc() FilterOpt {
	return func(f *Filter) {
		var column string = "id DESC"
		f.idorderByDesc = &column
	}
}
func WithUserGuid(userguid string) FilterOpt {
	c := userguid
	return func(f *Filter) {
		f.userguid = &c
	}
}
func WithUserGuidNot(userguid string) FilterOpt {
	c := userguid
	return func(f *Filter) {
		f.notuserguid = &c
	}
}
func WithUserGuidMoreThen(userguid string) FilterOpt {
	c := userguid
	return func(f *Filter) {
		f.gtuserguid = &c
	}
}
func WithUserGuidLowerThen(userguid string) FilterOpt {
	c := userguid
	return func(f *Filter) {
		f.ltuserguid = &c
	}
}
func WithUserGuidMoreOrEqualThen(userguid string) FilterOpt {
	c := userguid
	return func(f *Filter) {
		f.gtequserguid = &c
	}
}
func WithUserGuidLowerOrEqualThen(userguid string) FilterOpt {
	c := userguid
	return func(f *Filter) {
		f.ltequserguid = &c
	}
}
func WithUserGuids(userguids ...string) FilterOpt {
	return func(f *Filter) {
		f.userguids = append(f.userguids, userguids...)
	}
}

func WithOrderByUserGuidAsc() FilterOpt {
	return func(f *Filter) {
		var column string = "user_guid ASC"
		f.userguidorderByAsc = &column
	}
}
func WithOrderByUserGuidDesc() FilterOpt {
	return func(f *Filter) {
		var column string = "user_guid DESC"
		f.userguidorderByDesc = &column
	}
}
func WithRefreshToken(refreshtoken string) FilterOpt {
	c := refreshtoken
	return func(f *Filter) {
		f.refreshtoken = &c
	}
}
func WithRefreshTokenNot(refreshtoken string) FilterOpt {
	c := refreshtoken
	return func(f *Filter) {
		f.notrefreshtoken = &c
	}
}
func WithRefreshTokenMoreThen(refreshtoken string) FilterOpt {
	c := refreshtoken
	return func(f *Filter) {
		f.gtrefreshtoken = &c
	}
}
func WithRefreshTokenLowerThen(refreshtoken string) FilterOpt {
	c := refreshtoken
	return func(f *Filter) {
		f.ltrefreshtoken = &c
	}
}
func WithRefreshTokenMoreOrEqualThen(refreshtoken string) FilterOpt {
	c := refreshtoken
	return func(f *Filter) {
		f.gteqrefreshtoken = &c
	}
}
func WithRefreshTokenLowerOrEqualThen(refreshtoken string) FilterOpt {
	c := refreshtoken
	return func(f *Filter) {
		f.lteqrefreshtoken = &c
	}
}
func WithRefreshTokens(refreshtokens ...string) FilterOpt {
	return func(f *Filter) {
		f.refreshtokens = append(f.refreshtokens, refreshtokens...)
	}
}

func WithOrderByRefreshTokenAsc() FilterOpt {
	return func(f *Filter) {
		var column string = "refresh_token ASC"
		f.refreshtokenorderByAsc = &column
	}
}
func WithOrderByRefreshTokenDesc() FilterOpt {
	return func(f *Filter) {
		var column string = "refresh_token DESC"
		f.refreshtokenorderByDesc = &column
	}
}
func WithActive(active bool) FilterOpt {
	c := active
	return func(f *Filter) {
		f.active = &c
	}
}
func WithActiveNot(active bool) FilterOpt {
	c := active
	return func(f *Filter) {
		f.notactive = &c
	}
}
func WithActiveMoreThen(active bool) FilterOpt {
	c := active
	return func(f *Filter) {
		f.gtactive = &c
	}
}
func WithActiveLowerThen(active bool) FilterOpt {
	c := active
	return func(f *Filter) {
		f.ltactive = &c
	}
}
func WithActiveMoreOrEqualThen(active bool) FilterOpt {
	c := active
	return func(f *Filter) {
		f.gteqactive = &c
	}
}
func WithActiveLowerOrEqualThen(active bool) FilterOpt {
	c := active
	return func(f *Filter) {
		f.lteqactive = &c
	}
}
func WithActives(actives ...bool) FilterOpt {
	return func(f *Filter) {
		f.actives = append(f.actives, actives...)
	}
}

func WithOrderByActiveAsc() FilterOpt {
	return func(f *Filter) {
		var column string = "active ASC"
		f.activeorderByAsc = &column
	}
}
func WithOrderByActiveDesc() FilterOpt {
	return func(f *Filter) {
		var column string = "active DESC"
		f.activeorderByDesc = &column
	}
}
func WithUserAgent(useragent string) FilterOpt {
	c := useragent
	return func(f *Filter) {
		f.useragent = &c
	}
}
func WithUserAgentNot(useragent string) FilterOpt {
	c := useragent
	return func(f *Filter) {
		f.notuseragent = &c
	}
}
func WithUserAgentMoreThen(useragent string) FilterOpt {
	c := useragent
	return func(f *Filter) {
		f.gtuseragent = &c
	}
}
func WithUserAgentLowerThen(useragent string) FilterOpt {
	c := useragent
	return func(f *Filter) {
		f.ltuseragent = &c
	}
}
func WithUserAgentMoreOrEqualThen(useragent string) FilterOpt {
	c := useragent
	return func(f *Filter) {
		f.gtequseragent = &c
	}
}
func WithUserAgentLowerOrEqualThen(useragent string) FilterOpt {
	c := useragent
	return func(f *Filter) {
		f.ltequseragent = &c
	}
}
func WithUserAgents(useragents ...string) FilterOpt {
	return func(f *Filter) {
		f.useragents = append(f.useragents, useragents...)
	}
}

func WithOrderByUserAgentAsc() FilterOpt {
	return func(f *Filter) {
		var column string = "user_agent ASC"
		f.useragentorderByAsc = &column
	}
}
func WithOrderByUserAgentDesc() FilterOpt {
	return func(f *Filter) {
		var column string = "user_agent DESC"
		f.useragentorderByDesc = &column
	}
}
func WithIP(ip string) FilterOpt {
	c := ip
	return func(f *Filter) {
		f.ip = &c
	}
}
func WithIPNot(ip string) FilterOpt {
	c := ip
	return func(f *Filter) {
		f.notip = &c
	}
}
func WithIPMoreThen(ip string) FilterOpt {
	c := ip
	return func(f *Filter) {
		f.gtip = &c
	}
}
func WithIPLowerThen(ip string) FilterOpt {
	c := ip
	return func(f *Filter) {
		f.ltip = &c
	}
}
func WithIPMoreOrEqualThen(ip string) FilterOpt {
	c := ip
	return func(f *Filter) {
		f.gteqip = &c
	}
}
func WithIPLowerOrEqualThen(ip string) FilterOpt {
	c := ip
	return func(f *Filter) {
		f.lteqip = &c
	}
}
func WithIPs(ips ...string) FilterOpt {
	return func(f *Filter) {
		f.ips = append(f.ips, ips...)
	}
}

func WithOrderByIPAsc() FilterOpt {
	return func(f *Filter) {
		var column string = "ip ASC"
		f.iporderByAsc = &column
	}
}
func WithOrderByIPDesc() FilterOpt {
	return func(f *Filter) {
		var column string = "ip DESC"
		f.iporderByDesc = &column
	}
}

func applyWhere[B interface {
	Where(pred interface{}, args ...interface{}) B
	Limit(limit uint64) B
	Offset(limit uint64) B
	OrderBy(orderBys ...string) B
}](b B, f *Filter) B {
	if f.id != nil {
		b = b.Where(sq.Eq{ColumnTokenID: *f.id})
	}
	if f.notid != nil {
		b = b.Where(sq.NotEq{ColumnTokenID: *f.notid})
	}
	if f.ltid != nil {
		b = b.Where(sq.Lt{ColumnTokenID: *f.ltid})
	}
	if f.gtid != nil {
		b = b.Where(sq.Gt{ColumnTokenID: *f.gtid})
	}
	if f.lteqid != nil {
		b = b.Where(sq.LtOrEq{ColumnTokenID: *f.lteqid})
	}
	if f.gteqid != nil {
		b = b.Where(sq.GtOrEq{ColumnTokenID: *f.gteqid})
	}
	if f.ids != nil {
		b = b.Where(sq.Eq{ColumnTokenID: f.ids})
	}
	if f.idorderByAsc != nil {
		b = b.OrderBy(*f.idorderByAsc)
	}
	if f.idorderByDesc != nil {
		b = b.OrderBy(*f.idorderByDesc)
	}
	if f.userguid != nil {
		b = b.Where(sq.Eq{ColumnTokenUserGuid: *f.userguid})
	}
	if f.notuserguid != nil {
		b = b.Where(sq.NotEq{ColumnTokenUserGuid: *f.notuserguid})
	}
	if f.ltuserguid != nil {
		b = b.Where(sq.Lt{ColumnTokenUserGuid: *f.ltuserguid})
	}
	if f.gtuserguid != nil {
		b = b.Where(sq.Gt{ColumnTokenUserGuid: *f.gtuserguid})
	}
	if f.ltequserguid != nil {
		b = b.Where(sq.LtOrEq{ColumnTokenUserGuid: *f.ltequserguid})
	}
	if f.gtequserguid != nil {
		b = b.Where(sq.GtOrEq{ColumnTokenUserGuid: *f.gtequserguid})
	}
	if f.userguids != nil {
		b = b.Where(sq.Eq{ColumnTokenUserGuid: f.userguids})
	}
	if f.userguidorderByAsc != nil {
		b = b.OrderBy(*f.userguidorderByAsc)
	}
	if f.userguidorderByDesc != nil {
		b = b.OrderBy(*f.userguidorderByDesc)
	}
	if f.refreshtoken != nil {
		b = b.Where(sq.Eq{ColumnTokenRefreshToken: *f.refreshtoken})
	}
	if f.notrefreshtoken != nil {
		b = b.Where(sq.NotEq{ColumnTokenRefreshToken: *f.notrefreshtoken})
	}
	if f.ltrefreshtoken != nil {
		b = b.Where(sq.Lt{ColumnTokenRefreshToken: *f.ltrefreshtoken})
	}
	if f.gtrefreshtoken != nil {
		b = b.Where(sq.Gt{ColumnTokenRefreshToken: *f.gtrefreshtoken})
	}
	if f.lteqrefreshtoken != nil {
		b = b.Where(sq.LtOrEq{ColumnTokenRefreshToken: *f.lteqrefreshtoken})
	}
	if f.gteqrefreshtoken != nil {
		b = b.Where(sq.GtOrEq{ColumnTokenRefreshToken: *f.gteqrefreshtoken})
	}
	if f.refreshtokens != nil {
		b = b.Where(sq.Eq{ColumnTokenRefreshToken: f.refreshtokens})
	}
	if f.refreshtokenorderByAsc != nil {
		b = b.OrderBy(*f.refreshtokenorderByAsc)
	}
	if f.refreshtokenorderByDesc != nil {
		b = b.OrderBy(*f.refreshtokenorderByDesc)
	}
	if f.active != nil {
		b = b.Where(sq.Eq{ColumnTokenActive: *f.active})
	}
	if f.notactive != nil {
		b = b.Where(sq.NotEq{ColumnTokenActive: *f.notactive})
	}
	if f.ltactive != nil {
		b = b.Where(sq.Lt{ColumnTokenActive: *f.ltactive})
	}
	if f.gtactive != nil {
		b = b.Where(sq.Gt{ColumnTokenActive: *f.gtactive})
	}
	if f.lteqactive != nil {
		b = b.Where(sq.LtOrEq{ColumnTokenActive: *f.lteqactive})
	}
	if f.gteqactive != nil {
		b = b.Where(sq.GtOrEq{ColumnTokenActive: *f.gteqactive})
	}
	if f.actives != nil {
		b = b.Where(sq.Eq{ColumnTokenActive: f.actives})
	}
	if f.activeorderByAsc != nil {
		b = b.OrderBy(*f.activeorderByAsc)
	}
	if f.activeorderByDesc != nil {
		b = b.OrderBy(*f.activeorderByDesc)
	}
	if f.useragent != nil {
		b = b.Where(sq.Eq{ColumnTokenUserAgent: *f.useragent})
	}
	if f.notuseragent != nil {
		b = b.Where(sq.NotEq{ColumnTokenUserAgent: *f.notuseragent})
	}
	if f.ltuseragent != nil {
		b = b.Where(sq.Lt{ColumnTokenUserAgent: *f.ltuseragent})
	}
	if f.gtuseragent != nil {
		b = b.Where(sq.Gt{ColumnTokenUserAgent: *f.gtuseragent})
	}
	if f.ltequseragent != nil {
		b = b.Where(sq.LtOrEq{ColumnTokenUserAgent: *f.ltequseragent})
	}
	if f.gtequseragent != nil {
		b = b.Where(sq.GtOrEq{ColumnTokenUserAgent: *f.gtequseragent})
	}
	if f.useragents != nil {
		b = b.Where(sq.Eq{ColumnTokenUserAgent: f.useragents})
	}
	if f.useragentorderByAsc != nil {
		b = b.OrderBy(*f.useragentorderByAsc)
	}
	if f.useragentorderByDesc != nil {
		b = b.OrderBy(*f.useragentorderByDesc)
	}
	if f.ip != nil {
		b = b.Where(sq.Eq{ColumnTokenIP: *f.ip})
	}
	if f.notip != nil {
		b = b.Where(sq.NotEq{ColumnTokenIP: *f.notip})
	}
	if f.ltip != nil {
		b = b.Where(sq.Lt{ColumnTokenIP: *f.ltip})
	}
	if f.gtip != nil {
		b = b.Where(sq.Gt{ColumnTokenIP: *f.gtip})
	}
	if f.lteqip != nil {
		b = b.Where(sq.LtOrEq{ColumnTokenIP: *f.lteqip})
	}
	if f.gteqip != nil {
		b = b.Where(sq.GtOrEq{ColumnTokenIP: *f.gteqip})
	}
	if f.ips != nil {
		b = b.Where(sq.Eq{ColumnTokenIP: f.ips})
	}
	if f.iporderByAsc != nil {
		b = b.OrderBy(*f.iporderByAsc)
	}
	if f.iporderByDesc != nil {
		b = b.OrderBy(*f.iporderByDesc)
	}

	if f.limit != nil {
		b = b.Limit(uint64(*f.limit))
	}
	if f.offset != nil {
		b = b.Offset(uint64(*f.offset))
	}

	return b
}

type UpdateOpt func(u *Update)

// TokenUpdate represents the Token update struct.
type Update struct {
	id           *int64
	userguid     *string
	refreshtoken *string
	active       *bool
	useragent    *string
	ip           *string
}

func NewUpdate(opts ...UpdateOpt) Update {
	u := &Update{}
	for _, opt := range opts {
		opt(u)
	}
	return *u
}
func WithUpdateID(id int64) UpdateOpt {
	return func(f *Update) {
		f.id = &id
	}
}
func WithUpdateUserGuid(userguid string) UpdateOpt {
	return func(f *Update) {
		f.userguid = &userguid
	}
}
func WithUpdateRefreshToken(refreshtoken string) UpdateOpt {
	return func(f *Update) {
		f.refreshtoken = &refreshtoken
	}
}
func WithUpdateActive(active bool) UpdateOpt {
	return func(f *Update) {
		f.active = &active
	}
}
func WithUpdateUserAgent(useragent string) UpdateOpt {
	return func(f *Update) {
		f.useragent = &useragent
	}
}
func WithUpdateIP(ip string) UpdateOpt {
	return func(f *Update) {
		f.ip = &ip
	}
}

func applySet[B interface {
	Set(column string, value interface{}) B
}](b B, f *Update) B {
	if f.id != nil {
		b = b.Set(ColumnTokenID, *f.id)
	}
	if f.userguid != nil {
		b = b.Set(ColumnTokenUserGuid, *f.userguid)
	}
	if f.refreshtoken != nil {
		b = b.Set(ColumnTokenRefreshToken, *f.refreshtoken)
	}
	if f.active != nil {
		b = b.Set(ColumnTokenActive, *f.active)
	}
	if f.useragent != nil {
		b = b.Set(ColumnTokenUserAgent, *f.useragent)
	}
	if f.ip != nil {
		b = b.Set(ColumnTokenIP, *f.ip)
	}

	return b
}
