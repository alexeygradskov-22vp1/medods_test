// Code generated by generator, DO NOT EDIT.
package token

import (
	"context"
	"database/sql"
	"fmt"

	sq "github.com/Masterminds/squirrel"
)

func (r *CommandRepository) Get(ctx context.Context, opts ...FilterOpt) (*Token, error) {
	return get(ctx, r.runner, r.placeholder, opts...)
}

func (r *QueryRepository) Get(ctx context.Context, opts ...FilterOpt) (*Token, error) {
	return get(ctx, r.runner, r.placeholder, opts...)
}

func (r *CommandRepository) GetMany(ctx context.Context, opts ...FilterOpt) (Tokens, error) {
	return getMany(ctx, r.runner, r.placeholder, opts...)
}

func (r *QueryRepository) GetMany(ctx context.Context, opts ...FilterOpt) (Tokens, error) {
	return getMany(ctx, r.runner, r.placeholder, opts...)
}

func get(ctx context.Context, run querier, placeholder wildcard, opts ...FilterOpt) (*Token, error) {
	var b sq.SelectBuilder

	switch placeholder {
	case DollarWildcard:
		b = sq.Select(ColumnTokenID, ColumnTokenUserGuid, ColumnTokenRefreshToken, ColumnTokenActive, ColumnTokenUserAgent, ColumnTokenIP).From(TableToken).PlaceholderFormat(sq.Dollar)
	default:
		b = sq.Select(ColumnTokenID, ColumnTokenUserGuid, ColumnTokenRefreshToken, ColumnTokenActive, ColumnTokenUserAgent, ColumnTokenIP).From(TableToken).PlaceholderFormat(sq.Question)
	}

	f := Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](&f)
	}
	b = applyWhere(b, &f)

	query, args := b.MustSql()

	var model Token
	err := run.QueryRowContext(ctx, query, args...).Scan(&model.ID, &model.UserGuid, &model.RefreshToken, &model.Active, &model.UserAgent, &model.IP)
	if err != nil {
		return nil, fmt.Errorf("failed to get query %s with args %v error = %w", query, args, err)
	}

	return &model, err
}

func getMany(ctx context.Context, run querier, placeholder wildcard, opts ...FilterOpt) (Tokens, error) {
	var b sq.SelectBuilder

	switch placeholder {
	case DollarWildcard:
		b = sq.Select(ColumnTokenID, ColumnTokenUserGuid, ColumnTokenRefreshToken, ColumnTokenActive, ColumnTokenUserAgent, ColumnTokenIP).From(TableToken).PlaceholderFormat(sq.Dollar)
	default:
		b = sq.Select(ColumnTokenID, ColumnTokenUserGuid, ColumnTokenRefreshToken, ColumnTokenActive, ColumnTokenUserAgent, ColumnTokenIP).From(TableToken).PlaceholderFormat(sq.Question)
	}

	f := Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](&f)
	}
	b = applyWhere(b, &f)

	query, args := b.MustSql()

	var tokens Tokens
	rows, err := run.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("error querying database: %w", err)
	}
	defer rows.Close()

	var model Token
	for rows.Next() {
		err = rows.Scan(&model.ID, &model.UserGuid, &model.RefreshToken, &model.Active, &model.UserAgent, &model.IP)
		if err != nil {
			return nil, fmt.Errorf("error scanning row: %w", err)
		}
		tokens = append(tokens, model)
	}

	if rows.Err() != nil {
		return nil, fmt.Errorf("error iterating rows: %w", rows.Err())
	}

	return tokens, err
}

func (r *CommandRepository) GetLazy(ctx context.Context, opts ...FilterOpt) (iterToken, error) {
	return getManyLazy(ctx, r.runner, r.placeholder, opts...)
}

func (r *QueryRepository) GetLazy(ctx context.Context, opts ...FilterOpt) (iterToken, error) {
	return getManyLazy(ctx, r.runner, r.placeholder, opts...)
}

func getManyLazy(ctx context.Context, run querier, placeholder wildcard, opts ...FilterOpt) (iterToken, error) {
	var b sq.SelectBuilder

	switch placeholder {
	case DollarWildcard:
		b = sq.Select(ColumnTokenID, ColumnTokenUserGuid, ColumnTokenRefreshToken, ColumnTokenActive, ColumnTokenUserAgent, ColumnTokenIP).From(TableToken).PlaceholderFormat(sq.Dollar)
	default:
		b = sq.Select(ColumnTokenID, ColumnTokenUserGuid, ColumnTokenRefreshToken, ColumnTokenActive, ColumnTokenUserAgent, ColumnTokenIP).From(TableToken).PlaceholderFormat(sq.Question)
	}

	f := Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](&f)
	}
	b = applyWhere(b, &f)

	query, args := b.MustSql()
	rows, err := run.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("error querying database: %w", err)
	}

	return tokenIter(rows), nil
}

func tokenIter(rows *sql.Rows) iterToken {
	return func(yield func(Token) bool) {
		defer rows.Close()
		var model Token
		for rows.Next() {
			err := rows.Scan(&model.ID, &model.UserGuid, &model.RefreshToken, &model.Active, &model.UserAgent, &model.IP)
			if err != nil {
				return
			}

			if !yield(model) {
				return
			}
		}
	}
}
func (r *CommandRepository) GetID(ctx context.Context, opts ...FilterOpt) ([]int64, error) {
	return getID(ctx, r.runner, r.placeholder, opts...)
}

func (r *QueryRepository) GetID(ctx context.Context, opts ...FilterOpt) ([]int64, error) {
	return getID(ctx, r.runner, r.placeholder, opts...)
}

func getID(ctx context.Context, run querier, placeholder wildcard, opts ...FilterOpt) ([]int64, error) {
	var b sq.SelectBuilder

	switch placeholder {
	case DollarWildcard:
		b = sq.Select(
			ColumnTokenID,
		).From(TableToken).PlaceholderFormat(sq.Dollar)

	default:
		b = sq.Select(
			ColumnTokenID,
		).From(TableToken).PlaceholderFormat(sq.Question)
	}

	f := Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](&f)
	}
	b = applyWhere(b, &f)
	query, args := b.MustSql()
	IDs := make([]int64, 0, 32)

	rows, err := run.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("error querying database: %w", err)
	}
	defer rows.Close()

	var temp int64
	for rows.Next() {
		err = rows.Scan(&temp)
		if err != nil {
			return nil, fmt.Errorf("error scanning row: %w", err)
		}
		IDs = append(IDs, temp)
	}

	if rows.Err() != nil {
		return nil, fmt.Errorf("error iterating rows: %w", rows.Err())
	}

	return IDs, err
}
func (r *CommandRepository) GetUserGuid(ctx context.Context, opts ...FilterOpt) ([]string, error) {
	return getUserGuid(ctx, r.runner, r.placeholder, opts...)
}

func (r *QueryRepository) GetUserGuid(ctx context.Context, opts ...FilterOpt) ([]string, error) {
	return getUserGuid(ctx, r.runner, r.placeholder, opts...)
}

func getUserGuid(ctx context.Context, run querier, placeholder wildcard, opts ...FilterOpt) ([]string, error) {
	var b sq.SelectBuilder

	switch placeholder {
	case DollarWildcard:
		b = sq.Select(
			ColumnTokenUserGuid,
		).From(TableToken).PlaceholderFormat(sq.Dollar)

	default:
		b = sq.Select(
			ColumnTokenUserGuid,
		).From(TableToken).PlaceholderFormat(sq.Question)
	}

	f := Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](&f)
	}
	b = applyWhere(b, &f)
	query, args := b.MustSql()
	UserGuids := make([]string, 0, 32)

	rows, err := run.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("error querying database: %w", err)
	}
	defer rows.Close()

	var temp string
	for rows.Next() {
		err = rows.Scan(&temp)
		if err != nil {
			return nil, fmt.Errorf("error scanning row: %w", err)
		}
		UserGuids = append(UserGuids, temp)
	}

	if rows.Err() != nil {
		return nil, fmt.Errorf("error iterating rows: %w", rows.Err())
	}

	return UserGuids, err
}
func (r *CommandRepository) GetRefreshToken(ctx context.Context, opts ...FilterOpt) ([]string, error) {
	return getRefreshToken(ctx, r.runner, r.placeholder, opts...)
}

func (r *QueryRepository) GetRefreshToken(ctx context.Context, opts ...FilterOpt) ([]string, error) {
	return getRefreshToken(ctx, r.runner, r.placeholder, opts...)
}

func getRefreshToken(ctx context.Context, run querier, placeholder wildcard, opts ...FilterOpt) ([]string, error) {
	var b sq.SelectBuilder

	switch placeholder {
	case DollarWildcard:
		b = sq.Select(
			ColumnTokenRefreshToken,
		).From(TableToken).PlaceholderFormat(sq.Dollar)

	default:
		b = sq.Select(
			ColumnTokenRefreshToken,
		).From(TableToken).PlaceholderFormat(sq.Question)
	}

	f := Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](&f)
	}
	b = applyWhere(b, &f)
	query, args := b.MustSql()
	RefreshTokens := make([]string, 0, 32)

	rows, err := run.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("error querying database: %w", err)
	}
	defer rows.Close()

	var temp string
	for rows.Next() {
		err = rows.Scan(&temp)
		if err != nil {
			return nil, fmt.Errorf("error scanning row: %w", err)
		}
		RefreshTokens = append(RefreshTokens, temp)
	}

	if rows.Err() != nil {
		return nil, fmt.Errorf("error iterating rows: %w", rows.Err())
	}

	return RefreshTokens, err
}
func (r *CommandRepository) GetActive(ctx context.Context, opts ...FilterOpt) ([]bool, error) {
	return getActive(ctx, r.runner, r.placeholder, opts...)
}

func (r *QueryRepository) GetActive(ctx context.Context, opts ...FilterOpt) ([]bool, error) {
	return getActive(ctx, r.runner, r.placeholder, opts...)
}

func getActive(ctx context.Context, run querier, placeholder wildcard, opts ...FilterOpt) ([]bool, error) {
	var b sq.SelectBuilder

	switch placeholder {
	case DollarWildcard:
		b = sq.Select(
			ColumnTokenActive,
		).From(TableToken).PlaceholderFormat(sq.Dollar)

	default:
		b = sq.Select(
			ColumnTokenActive,
		).From(TableToken).PlaceholderFormat(sq.Question)
	}

	f := Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](&f)
	}
	b = applyWhere(b, &f)
	query, args := b.MustSql()
	Actives := make([]bool, 0, 32)

	rows, err := run.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("error querying database: %w", err)
	}
	defer rows.Close()

	var temp bool
	for rows.Next() {
		err = rows.Scan(&temp)
		if err != nil {
			return nil, fmt.Errorf("error scanning row: %w", err)
		}
		Actives = append(Actives, temp)
	}

	if rows.Err() != nil {
		return nil, fmt.Errorf("error iterating rows: %w", rows.Err())
	}

	return Actives, err
}
func (r *CommandRepository) GetUserAgent(ctx context.Context, opts ...FilterOpt) ([]string, error) {
	return getUserAgent(ctx, r.runner, r.placeholder, opts...)
}

func (r *QueryRepository) GetUserAgent(ctx context.Context, opts ...FilterOpt) ([]string, error) {
	return getUserAgent(ctx, r.runner, r.placeholder, opts...)
}

func getUserAgent(ctx context.Context, run querier, placeholder wildcard, opts ...FilterOpt) ([]string, error) {
	var b sq.SelectBuilder

	switch placeholder {
	case DollarWildcard:
		b = sq.Select(
			ColumnTokenUserAgent,
		).From(TableToken).PlaceholderFormat(sq.Dollar)

	default:
		b = sq.Select(
			ColumnTokenUserAgent,
		).From(TableToken).PlaceholderFormat(sq.Question)
	}

	f := Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](&f)
	}
	b = applyWhere(b, &f)
	query, args := b.MustSql()
	UserAgents := make([]string, 0, 32)

	rows, err := run.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("error querying database: %w", err)
	}
	defer rows.Close()

	var temp string
	for rows.Next() {
		err = rows.Scan(&temp)
		if err != nil {
			return nil, fmt.Errorf("error scanning row: %w", err)
		}
		UserAgents = append(UserAgents, temp)
	}

	if rows.Err() != nil {
		return nil, fmt.Errorf("error iterating rows: %w", rows.Err())
	}

	return UserAgents, err
}
func (r *CommandRepository) GetIP(ctx context.Context, opts ...FilterOpt) ([]string, error) {
	return getIP(ctx, r.runner, r.placeholder, opts...)
}

func (r *QueryRepository) GetIP(ctx context.Context, opts ...FilterOpt) ([]string, error) {
	return getIP(ctx, r.runner, r.placeholder, opts...)
}

func getIP(ctx context.Context, run querier, placeholder wildcard, opts ...FilterOpt) ([]string, error) {
	var b sq.SelectBuilder

	switch placeholder {
	case DollarWildcard:
		b = sq.Select(
			ColumnTokenIP,
		).From(TableToken).PlaceholderFormat(sq.Dollar)

	default:
		b = sq.Select(
			ColumnTokenIP,
		).From(TableToken).PlaceholderFormat(sq.Question)
	}

	f := Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](&f)
	}
	b = applyWhere(b, &f)
	query, args := b.MustSql()
	IPs := make([]string, 0, 32)

	rows, err := run.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("error querying database: %w", err)
	}
	defer rows.Close()

	var temp string
	for rows.Next() {
		err = rows.Scan(&temp)
		if err != nil {
			return nil, fmt.Errorf("error scanning row: %w", err)
		}
		IPs = append(IPs, temp)
	}

	if rows.Err() != nil {
		return nil, fmt.Errorf("error iterating rows: %w", rows.Err())
	}

	return IPs, err
}
