// Code generated by generator, DO NOT EDIT.
package user

import (
	"context"
	"database/sql"
	"fmt"

	sq "github.com/Masterminds/squirrel"
)

func (r *CommandRepository) Get(ctx context.Context, opts ...FilterOpt) (*User, error) {
	return get(ctx, r.runner, r.placeholder, opts...)
}

func (r *QueryRepository) Get(ctx context.Context, opts ...FilterOpt) (*User, error) {
	return get(ctx, r.runner, r.placeholder, opts...)
}

func (r *CommandRepository) GetMany(ctx context.Context, opts ...FilterOpt) (Users, error) {
	return getMany(ctx, r.runner, r.placeholder, opts...)
}

func (r *QueryRepository) GetMany(ctx context.Context, opts ...FilterOpt) (Users, error) {
	return getMany(ctx, r.runner, r.placeholder, opts...)
}

func get(ctx context.Context, run querier, placeholder wildcard, opts ...FilterOpt) (*User, error) {
	var b sq.SelectBuilder

	switch placeholder {
	case DollarWildcard:
		b = sq.Select(ColumnUserGuid).From(TableUser).PlaceholderFormat(sq.Dollar)
	default:
		b = sq.Select(ColumnUserGuid).From(TableUser).PlaceholderFormat(sq.Question)
	}

	f := Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](&f)
	}
	b = applyWhere(b, &f)

	query, args := b.MustSql()

	var model User
	err := run.QueryRowContext(ctx, query, args...).Scan(&model.Guid)
	if err != nil {
		return nil, fmt.Errorf("failed to get query %s with args %v error = %w", query, args, err)
	}

	return &model, err
}

func getMany(ctx context.Context, run querier, placeholder wildcard, opts ...FilterOpt) (Users, error) {
	var b sq.SelectBuilder

	switch placeholder {
	case DollarWildcard:
		b = sq.Select(ColumnUserGuid).From(TableUser).PlaceholderFormat(sq.Dollar)
	default:
		b = sq.Select(ColumnUserGuid).From(TableUser).PlaceholderFormat(sq.Question)
	}

	f := Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](&f)
	}
	b = applyWhere(b, &f)

	query, args := b.MustSql()

	var users Users
	rows, err := run.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("error querying database: %w", err)
	}
	defer rows.Close()

	var model User
	for rows.Next() {
		err = rows.Scan(&model.Guid)
		if err != nil {
			return nil, fmt.Errorf("error scanning row: %w", err)
		}
		users = append(users, model)
	}

	if rows.Err() != nil {
		return nil, fmt.Errorf("error iterating rows: %w", rows.Err())
	}

	return users, err
}

func (r *CommandRepository) GetLazy(ctx context.Context, opts ...FilterOpt) (iterUser, error) {
	return getManyLazy(ctx, r.runner, r.placeholder, opts...)
}

func (r *QueryRepository) GetLazy(ctx context.Context, opts ...FilterOpt) (iterUser, error) {
	return getManyLazy(ctx, r.runner, r.placeholder, opts...)
}

func getManyLazy(ctx context.Context, run querier, placeholder wildcard, opts ...FilterOpt) (iterUser, error) {
	var b sq.SelectBuilder

	switch placeholder {
	case DollarWildcard:
		b = sq.Select(ColumnUserGuid).From(TableUser).PlaceholderFormat(sq.Dollar)
	default:
		b = sq.Select(ColumnUserGuid).From(TableUser).PlaceholderFormat(sq.Question)
	}

	f := Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](&f)
	}
	b = applyWhere(b, &f)

	query, args := b.MustSql()
	rows, err := run.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("error querying database: %w", err)
	}

	return userIter(rows), nil
}

func userIter(rows *sql.Rows) iterUser {
	return func(yield func(User) bool) {
		defer rows.Close()
		var model User
		for rows.Next() {
			err := rows.Scan(&model.Guid)
			if err != nil {
				return
			}

			if !yield(model) {
				return
			}
		}
	}
}
func (r *CommandRepository) GetGuid(ctx context.Context, opts ...FilterOpt) ([]string, error) {
	return getGuid(ctx, r.runner, r.placeholder, opts...)
}

func (r *QueryRepository) GetGuid(ctx context.Context, opts ...FilterOpt) ([]string, error) {
	return getGuid(ctx, r.runner, r.placeholder, opts...)
}

func getGuid(ctx context.Context, run querier, placeholder wildcard, opts ...FilterOpt) ([]string, error) {
	var b sq.SelectBuilder

	switch placeholder {
	case DollarWildcard:
		b = sq.Select(
			ColumnUserGuid,
		).From(TableUser).PlaceholderFormat(sq.Dollar)

	default:
		b = sq.Select(
			ColumnUserGuid,
		).From(TableUser).PlaceholderFormat(sq.Question)
	}

	f := Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](&f)
	}
	b = applyWhere(b, &f)
	query, args := b.MustSql()
	Guids := make([]string, 0, 32)

	rows, err := run.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("error querying database: %w", err)
	}
	defer rows.Close()

	var temp string
	for rows.Next() {
		err = rows.Scan(&temp)
		if err != nil {
			return nil, fmt.Errorf("error scanning row: %w", err)
		}
		Guids = append(Guids, temp)
	}

	if rows.Err() != nil {
		return nil, fmt.Errorf("error iterating rows: %w", rows.Err())
	}

	return Guids, err
}
