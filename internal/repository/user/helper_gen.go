// Code generated by generator, DO NOT EDIT.
package user

import (
	"iter"
	"reflect"
	"slices"
	"sort"
)

type Users []User

func (s Users) ToGuids() []string {
	output := make([]string, 0, len(s))
	for i := 0; i < len(s); i++ {
		output = append(output, s[i].Guid)
	}
	return output
}
func (s Users) FindByGuid(finder string) (User, bool) {
	for i := 0; i < len(s); i++ {
		if s[i].Guid == finder {
			return s[i], true
		}
	}
	return User{}, false
}
func (s Users) SortByGuid(asc bool) Users {
	if asc {
		sort.Slice(s, func(i, j int) bool {
			return s[i].Guid < s[j].Guid
		})
		return s
	}
	sort.Slice(s, func(i, j int) bool {
		return s[i].Guid > s[j].Guid
	})
	return s
}

func (s Users) FilterFunc(f func(i User) bool) Users {
	output := make(Users, 0, len(s))
	for i := 0; i < len(s); i++ {
		if f(s[i]) {
			output = append(output, s[i])
		}
	}
	return output
}
func (s Users) GetFirstGuid() (*string, bool) {
	if len(s) < 1 {
		return nil, false
	}
	return &s[0].Guid, true
}

func (s Users) GetFirst() (User, bool) {
	if len(s) < 1 {
		return User{}, false
	}
	return s[0], true
}

func (s Users) All() iterUser {
	return func(yield func(User) bool) {
		for _, elem := range s {
			if !yield(elem) {
				return
			}
		}
	}
}

// Iterators
type iterUser iter.Seq[User]

func (i iterUser) FilterFunc(predicate func(User) bool) iterUser {
	return func(yield func(User) bool) {
		for elem := range i {
			if predicate(elem) && !yield(elem) {
				return
			}
		}
	}
}

func (i iterUser) Map(transform func(User) User) iterUser {
	return func(yield func(User) bool) {
		for elem := range i {
			if !yield(transform(elem)) {
				return
			}
		}
	}
}

func (i iterUser) Take(n int) iterUser {
	count := 0
	return func(yield func(User) bool) {
		for elem := range i {
			if count >= n || !yield(elem) {
				return
			}
			count++
		}
	}
}

func (i iterUser) Find(findFunc func(User) bool) iterUser {
	return func(yield func(User) bool) {
		for elem := range i {
			if findFunc(elem) && !yield(elem) {
				return
			}
		}
	}
}

// doesnot work with pointers
func (i iterUser) Distinct(keyFunc func(User) any) iterUser {
	seen := make(map[any]bool)
	return func(yield func(User) bool) {
		for elem := range i {
			key := keyFunc(elem)
			if key != nil {
				val := reflect.ValueOf(key)
				switch val.Kind() {
				case reflect.Ptr, reflect.Interface,
					reflect.Slice, reflect.Map,
					reflect.Chan, reflect.Func:
					if val.IsNil() {
						continue
					}
				}
			}
			if !seen[key] {
				seen[key] = true
				if !yield(elem) {
					return
				}
			}
		}
	}
}
func (i iterUser) FilterByGuid(guid string) iterUser {
	return func(yield func(User) bool) {
		for elem := range i {
			if guid == elem.Guid && !yield(elem) {
				return
			}
		}
	}
}
func (i iterUser) ToGuids() iter.Seq[string] {
	return func(yield func(string) bool) {
		for elem := range i {
			if !yield(elem.Guid) {
				return
			}
		}
	}
}

func (i iterUser) First() (User, bool) {
	for elem := range i {
		return elem, true
	}
	return User{}, false
}

func (i iterUser) ForEach(f func(User)) {
	for elem := range i {
		f(elem)
	}
}

func (i iterUser) Collect() []User {
	return slices.Collect(iter.Seq[User](i))
}

// -1 if x is less than y,
//
//	0 if x equals y,
//
// +1 if x is greater than y.
func (i iterUser) Sort(sortFunc func(x, y User) int) []User {
	return slices.SortedFunc(iter.Seq[User](i), sortFunc)
}

type intIter iter.Seq[int]
type int8Iter iter.Seq[int8]
type int16Iter iter.Seq[int16]
type int32Iter iter.Seq[int32]
type int64Iter iter.Seq[int64]
type uintIter iter.Seq[uint]
type uint8Iter iter.Seq[uint8]
type uint16Iter iter.Seq[uint16]
type uint32Iter iter.Seq[uint32]
type uint64Iter iter.Seq[uint64]
type uintptrIter iter.Seq[uintptr]
type float32Iter iter.Seq[float32]
type float64Iter iter.Seq[float64]

func (i intIter) Sum() int {
	var res int
	for elem := range i {
		res += elem
	}
	return res
}
func (i intIter) Min() int {
	var min int
	first := true
	for elem := range i {
		if first || elem < min {
			min = elem
			first = false
		}
	}
	return min
}
func (i intIter) Max() int {
	var max int
	first := true
	for elem := range i {
		if first || elem > max {
			max = elem
			first = false
		}
	}
	return max
}
func (i intIter) Average() int {
	var sum, count int
	for elem := range i {
		sum += elem
		count++
	}
	if count == 0 {
		return 0
	}
	return sum / count
}
func (i int8Iter) Sum() int8 {
	var res int8
	for elem := range i {
		res += elem
	}
	return res
}
func (i int8Iter) Min() int8 {
	var min int8
	first := true
	for elem := range i {
		if first || elem < min {
			min = elem
			first = false
		}
	}
	return min
}
func (i int8Iter) Max() int8 {
	var max int8
	first := true
	for elem := range i {
		if first || elem > max {
			max = elem
			first = false
		}
	}
	return max
}
func (i int8Iter) Average() int8 {
	var sum, count int8
	for elem := range i {
		sum += elem
		count++
	}
	if count == 0 {
		return 0
	}
	return sum / count
}
func (i int16Iter) Sum() int16 {
	var res int16
	for elem := range i {
		res += elem
	}
	return res
}
func (i int16Iter) Min() int16 {
	var min int16
	first := true
	for elem := range i {
		if first || elem < min {
			min = elem
			first = false
		}
	}
	return min
}
func (i int16Iter) Max() int16 {
	var max int16
	first := true
	for elem := range i {
		if first || elem > max {
			max = elem
			first = false
		}
	}
	return max
}
func (i int16Iter) Average() int16 {
	var sum, count int16
	for elem := range i {
		sum += elem
		count++
	}
	if count == 0 {
		return 0
	}
	return sum / count
}
func (i int32Iter) Sum() int32 {
	var res int32
	for elem := range i {
		res += elem
	}
	return res
}
func (i int32Iter) Min() int32 {
	var min int32
	first := true
	for elem := range i {
		if first || elem < min {
			min = elem
			first = false
		}
	}
	return min
}
func (i int32Iter) Max() int32 {
	var max int32
	first := true
	for elem := range i {
		if first || elem > max {
			max = elem
			first = false
		}
	}
	return max
}
func (i int32Iter) Average() int32 {
	var sum, count int32
	for elem := range i {
		sum += elem
		count++
	}
	if count == 0 {
		return 0
	}
	return sum / count
}
func (i int64Iter) Sum() int64 {
	var res int64
	for elem := range i {
		res += elem
	}
	return res
}
func (i int64Iter) Min() int64 {
	var min int64
	first := true
	for elem := range i {
		if first || elem < min {
			min = elem
			first = false
		}
	}
	return min
}
func (i int64Iter) Max() int64 {
	var max int64
	first := true
	for elem := range i {
		if first || elem > max {
			max = elem
			first = false
		}
	}
	return max
}
func (i int64Iter) Average() int64 {
	var sum, count int64
	for elem := range i {
		sum += elem
		count++
	}
	if count == 0 {
		return 0
	}
	return sum / count
}
func (i uintIter) Sum() uint {
	var res uint
	for elem := range i {
		res += elem
	}
	return res
}
func (i uintIter) Min() uint {
	var min uint
	first := true
	for elem := range i {
		if first || elem < min {
			min = elem
			first = false
		}
	}
	return min
}
func (i uintIter) Max() uint {
	var max uint
	first := true
	for elem := range i {
		if first || elem > max {
			max = elem
			first = false
		}
	}
	return max
}
func (i uintIter) Average() uint {
	var sum, count uint
	for elem := range i {
		sum += elem
		count++
	}
	if count == 0 {
		return 0
	}
	return sum / count
}
func (i uint8Iter) Sum() uint8 {
	var res uint8
	for elem := range i {
		res += elem
	}
	return res
}
func (i uint8Iter) Min() uint8 {
	var min uint8
	first := true
	for elem := range i {
		if first || elem < min {
			min = elem
			first = false
		}
	}
	return min
}
func (i uint8Iter) Max() uint8 {
	var max uint8
	first := true
	for elem := range i {
		if first || elem > max {
			max = elem
			first = false
		}
	}
	return max
}
func (i uint8Iter) Average() uint8 {
	var sum, count uint8
	for elem := range i {
		sum += elem
		count++
	}
	if count == 0 {
		return 0
	}
	return sum / count
}
func (i uint16Iter) Sum() uint16 {
	var res uint16
	for elem := range i {
		res += elem
	}
	return res
}
func (i uint16Iter) Min() uint16 {
	var min uint16
	first := true
	for elem := range i {
		if first || elem < min {
			min = elem
			first = false
		}
	}
	return min
}
func (i uint16Iter) Max() uint16 {
	var max uint16
	first := true
	for elem := range i {
		if first || elem > max {
			max = elem
			first = false
		}
	}
	return max
}
func (i uint16Iter) Average() uint16 {
	var sum, count uint16
	for elem := range i {
		sum += elem
		count++
	}
	if count == 0 {
		return 0
	}
	return sum / count
}
func (i uint32Iter) Sum() uint32 {
	var res uint32
	for elem := range i {
		res += elem
	}
	return res
}
func (i uint32Iter) Min() uint32 {
	var min uint32
	first := true
	for elem := range i {
		if first || elem < min {
			min = elem
			first = false
		}
	}
	return min
}
func (i uint32Iter) Max() uint32 {
	var max uint32
	first := true
	for elem := range i {
		if first || elem > max {
			max = elem
			first = false
		}
	}
	return max
}
func (i uint32Iter) Average() uint32 {
	var sum, count uint32
	for elem := range i {
		sum += elem
		count++
	}
	if count == 0 {
		return 0
	}
	return sum / count
}
func (i uint64Iter) Sum() uint64 {
	var res uint64
	for elem := range i {
		res += elem
	}
	return res
}
func (i uint64Iter) Min() uint64 {
	var min uint64
	first := true
	for elem := range i {
		if first || elem < min {
			min = elem
			first = false
		}
	}
	return min
}
func (i uint64Iter) Max() uint64 {
	var max uint64
	first := true
	for elem := range i {
		if first || elem > max {
			max = elem
			first = false
		}
	}
	return max
}
func (i uint64Iter) Average() uint64 {
	var sum, count uint64
	for elem := range i {
		sum += elem
		count++
	}
	if count == 0 {
		return 0
	}
	return sum / count
}
func (i uintptrIter) Sum() uintptr {
	var res uintptr
	for elem := range i {
		res += elem
	}
	return res
}
func (i uintptrIter) Min() uintptr {
	var min uintptr
	first := true
	for elem := range i {
		if first || elem < min {
			min = elem
			first = false
		}
	}
	return min
}
func (i uintptrIter) Max() uintptr {
	var max uintptr
	first := true
	for elem := range i {
		if first || elem > max {
			max = elem
			first = false
		}
	}
	return max
}
func (i uintptrIter) Average() uintptr {
	var sum, count uintptr
	for elem := range i {
		sum += elem
		count++
	}
	if count == 0 {
		return 0
	}
	return sum / count
}
func (i float32Iter) Sum() float32 {
	var res float32
	for elem := range i {
		res += elem
	}
	return res
}
func (i float32Iter) Min() float32 {
	var min float32
	first := true
	for elem := range i {
		if first || elem < min {
			min = elem
			first = false
		}
	}
	return min
}
func (i float32Iter) Max() float32 {
	var max float32
	first := true
	for elem := range i {
		if first || elem > max {
			max = elem
			first = false
		}
	}
	return max
}
func (i float32Iter) Average() float32 {
	var sum, count float32
	for elem := range i {
		sum += elem
		count++
	}
	if count == 0 {
		return 0
	}
	return sum / count
}
func (i float64Iter) Sum() float64 {
	var res float64
	for elem := range i {
		res += elem
	}
	return res
}
func (i float64Iter) Min() float64 {
	var min float64
	first := true
	for elem := range i {
		if first || elem < min {
			min = elem
			first = false
		}
	}
	return min
}
func (i float64Iter) Max() float64 {
	var max float64
	first := true
	for elem := range i {
		if first || elem > max {
			max = elem
			first = false
		}
	}
	return max
}
func (i float64Iter) Average() float64 {
	var sum, count float64
	for elem := range i {
		sum += elem
		count++
	}
	if count == 0 {
		return 0
	}
	return sum / count
}
