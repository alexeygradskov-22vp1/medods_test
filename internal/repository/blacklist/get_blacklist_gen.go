// Code generated by generator, DO NOT EDIT.
package blacklist

import (
	"context"
	"database/sql"
	"fmt"

	sq "github.com/Masterminds/squirrel"
)

func (r *CommandRepository) Get(ctx context.Context, opts ...FilterOpt) (*Blacklist, error) {
	return get(ctx, r.runner, r.placeholder, opts...)
}

func (r *QueryRepository) Get(ctx context.Context, opts ...FilterOpt) (*Blacklist, error) {
	return get(ctx, r.runner, r.placeholder, opts...)
}

func (r *CommandRepository) GetMany(ctx context.Context, opts ...FilterOpt) (Blacklists, error) {
	return getMany(ctx, r.runner, r.placeholder, opts...)
}

func (r *QueryRepository) GetMany(ctx context.Context, opts ...FilterOpt) (Blacklists, error) {
	return getMany(ctx, r.runner, r.placeholder, opts...)
}

func get(ctx context.Context, run querier, placeholder wildcard, opts ...FilterOpt) (*Blacklist, error) {
	var b sq.SelectBuilder

	switch placeholder {
	case DollarWildcard:
		b = sq.Select(ColumnBlacklistAccessToken).From(TableBlacklist).PlaceholderFormat(sq.Dollar)
	default:
		b = sq.Select(ColumnBlacklistAccessToken).From(TableBlacklist).PlaceholderFormat(sq.Question)
	}

	f := Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](&f)
	}
	b = applyWhere(b, &f)

	query, args := b.MustSql()

	var model Blacklist
	err := run.QueryRowContext(ctx, query, args...).Scan(&model.AccessToken)
	if err != nil {
		return nil, fmt.Errorf("failed to get query %s with args %v error = %w", query, args, err)
	}

	return &model, err
}

func getMany(ctx context.Context, run querier, placeholder wildcard, opts ...FilterOpt) (Blacklists, error) {
	var b sq.SelectBuilder

	switch placeholder {
	case DollarWildcard:
		b = sq.Select(ColumnBlacklistAccessToken).From(TableBlacklist).PlaceholderFormat(sq.Dollar)
	default:
		b = sq.Select(ColumnBlacklistAccessToken).From(TableBlacklist).PlaceholderFormat(sq.Question)
	}

	f := Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](&f)
	}
	b = applyWhere(b, &f)

	query, args := b.MustSql()

	var blacklists Blacklists
	rows, err := run.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("error querying database: %w", err)
	}
	defer rows.Close()

	var model Blacklist
	for rows.Next() {
		err = rows.Scan(&model.AccessToken)
		if err != nil {
			return nil, fmt.Errorf("error scanning row: %w", err)
		}
		blacklists = append(blacklists, model)
	}

	if rows.Err() != nil {
		return nil, fmt.Errorf("error iterating rows: %w", rows.Err())
	}

	return blacklists, err
}

func (r *CommandRepository) GetLazy(ctx context.Context, opts ...FilterOpt) (iterBlacklist, error) {
	return getManyLazy(ctx, r.runner, r.placeholder, opts...)
}

func (r *QueryRepository) GetLazy(ctx context.Context, opts ...FilterOpt) (iterBlacklist, error) {
	return getManyLazy(ctx, r.runner, r.placeholder, opts...)
}

func getManyLazy(ctx context.Context, run querier, placeholder wildcard, opts ...FilterOpt) (iterBlacklist, error) {
	var b sq.SelectBuilder

	switch placeholder {
	case DollarWildcard:
		b = sq.Select(ColumnBlacklistAccessToken).From(TableBlacklist).PlaceholderFormat(sq.Dollar)
	default:
		b = sq.Select(ColumnBlacklistAccessToken).From(TableBlacklist).PlaceholderFormat(sq.Question)
	}

	f := Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](&f)
	}
	b = applyWhere(b, &f)

	query, args := b.MustSql()
	rows, err := run.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("error querying database: %w", err)
	}

	return blacklistIter(rows), nil
}

func blacklistIter(rows *sql.Rows) iterBlacklist {
	return func(yield func(Blacklist) bool) {
		defer rows.Close()
		var model Blacklist
		for rows.Next() {
			err := rows.Scan(&model.AccessToken)
			if err != nil {
				return
			}

			if !yield(model) {
				return
			}
		}
	}
}
func (r *CommandRepository) GetAccessToken(ctx context.Context, opts ...FilterOpt) ([]string, error) {
	return getAccessToken(ctx, r.runner, r.placeholder, opts...)
}

func (r *QueryRepository) GetAccessToken(ctx context.Context, opts ...FilterOpt) ([]string, error) {
	return getAccessToken(ctx, r.runner, r.placeholder, opts...)
}

func getAccessToken(ctx context.Context, run querier, placeholder wildcard, opts ...FilterOpt) ([]string, error) {
	var b sq.SelectBuilder

	switch placeholder {
	case DollarWildcard:
		b = sq.Select(
			ColumnBlacklistAccessToken,
		).From(TableBlacklist).PlaceholderFormat(sq.Dollar)

	default:
		b = sq.Select(
			ColumnBlacklistAccessToken,
		).From(TableBlacklist).PlaceholderFormat(sq.Question)
	}

	f := Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](&f)
	}
	b = applyWhere(b, &f)
	query, args := b.MustSql()
	AccessTokens := make([]string, 0, 32)

	rows, err := run.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("error querying database: %w", err)
	}
	defer rows.Close()

	var temp string
	for rows.Next() {
		err = rows.Scan(&temp)
		if err != nil {
			return nil, fmt.Errorf("error scanning row: %w", err)
		}
		AccessTokens = append(AccessTokens, temp)
	}

	if rows.Err() != nil {
		return nil, fmt.Errorf("error iterating rows: %w", rows.Err())
	}

	return AccessTokens, err
}
