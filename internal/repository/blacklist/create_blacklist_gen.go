// Code generated by generator, DO NOT EDIT.
package blacklist

import (
	"context"
	"fmt"

	sq "github.com/Masterminds/squirrel"
)

// CreateBlacklist inserts a new Blacklist into the database.
func (r *CommandRepository) Create(ctx context.Context, model *Blacklist) error {
	var query string
	var args []any

	switch r.placeholder {
	case DollarWildcard:
		query, args = sq.Insert(TableBlacklist).Columns(ColumnBlacklistAccessToken).Values(model.AccessToken).PlaceholderFormat(sq.Dollar).MustSql()
	default:
		query, args = sq.Insert(TableBlacklist).Columns(ColumnBlacklistAccessToken).Values(model.AccessToken).PlaceholderFormat(sq.Question).MustSql()
	}

	if _, err := r.runner.ExecContext(ctx, query, args...); err != nil {
		return fmt.Errorf("failed to exec create query %s with args %v error = %w", query, args, err)
	}
	return nil
}

// CreateBlacklist inserts a new Blacklist into the database.
func (r *CommandRepository) CreateMany(ctx context.Context, blacklists []Blacklist) error {
	var builder sq.InsertBuilder

	switch r.placeholder {
	case DollarWildcard:
		builder = sq.Insert(TableBlacklist).Columns(ColumnBlacklistAccessToken).PlaceholderFormat(sq.Dollar)
	default:
		builder = sq.Insert(TableBlacklist).Columns(ColumnBlacklistAccessToken).PlaceholderFormat(sq.Question)
	}

	for _, model := range blacklists {
		builder = builder.Values(model.AccessToken)
	}
	query, args := builder.MustSql()

	if _, err := r.runner.ExecContext(ctx, query, args...); err != nil {
		return fmt.Errorf("failed to exec create query %s with args %v error = %w", query, args, err)
	}
	return nil
}
